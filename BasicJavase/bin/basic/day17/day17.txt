原始的:文件流：（读写 ）
	FileInputStream/FileOuputStream/
缓冲流：
	BufferedInputStream/BufferedOutputStream
数据流：读写（int double,String)
	DataOutputStream/DataInputStream
	逐行读写：
	PrintWriter/PrintReader
转换流：字节流和字符流没有任何关系，必须通过转换流
	InputStreamReader／OutputStreamReader
	InputStreamWriter／OutputStreamWriter
对象流：（读写任意的对象）
	ObjectInputStream/objectOutputStream

	
3.编码／解码？

在java程序的开发中最常用的是：ISO8859－1／GBK／GB2312／unicode/UTF编码
ISO8859-1：属于单字节编码，最多只能表示0～255的字符范围，主要在英文上应用
GBK／GB2312：中文的国标编码，专门用来表示汉字，是双字节编码
unicode:java中使用此编码方式，是最标准的一种编码，使用十六进制表示编码。但此编码不兼容ISO8859-1
UTF：由于unicode不支持ISO8859-1，而且容易占用更多的空间，而且对于英文字母也需要使用两个字节编码，
这样使用unicode不便于传输和存储，因此产生了UTF编码。UTF兼容了ISO8859-1，同时也可以用来表示所有语言字符，
不过UTF编码是不定长编码，每一个字符的长度为1～6个字节不等，一般在中文网页中使用此编码，可以节省空间

	utf-16be是2个字节  UTF-8英文1个字节，中文三个字节
基本类型的序列化writeInt()  readInt()
照片的序列化 ImageIO.read() ImageIO.write()
字符串的序列化：String字符串本质上是char[]
中：	4e2d  		 0100 1110  0010 1101
utf-8:e4 b8 ad:	1110 0100 1011 1000 1010 1101

中：	4e2d  	1110 0100 1011 1000 1010 1101
utf-8:e4 b8 ad:	1110 0100 1011 1000 1010 1101
系统默认编码：中文Windows 默认是GBK
lInux:有UTF-8,有GBK GB2312
默认编码为GBK系统，默认保存的文本文件，在默认UTF-8的系统上打开会出现乱码现象
str.getBytes()无参数方法是使用系统默认编码方案

转换流：InputStreamReader和OutputStreamWriter用于字节数据到字符数据之间的转换
	Input StreamReader需要和InputStream套接
	Output StreamReader需要和OuputStream套接
	转换流在构造时可以指定其编码集合：如；
	InputStream ifr = new InputStreamReader(System.in,"ISO8859_1")
	
	
输入流：从文件往程序里读文件，我们都是站在程序的角度看的。
输入流：从文件向程序，叫输入。另外叫输出。站文件角度叫输出，另外是输入。
字节流：按字节读，一个字节八位。inputStream/OutputStream
字符流：一个字符两个字节。Reader/Writer
字节流：从一个特定数据源（节点）读写数据（如：文件，内存）
处理流是‘连接’在已存在的流（节点流或处理流）之上，通过对数据的处理为程序提供更强大的读写功能。

继承自InputStream的流都是用于向程序输入数据，且数据单位为字节（8bit)。
继承自OutputSteam的流是用于程序中向外写数据，单位字节。
先写flush在写close


Reader：数据单位两个字节两个字节向外读。InputStream是一个字节的读。
Writer：继承自Writer的流都是用于程序中输出数据，单位两个字节，16bit

Java SE Day03
2012/3/20
==================== 
  
  基本类型的序列化 writeInt()  readInt()
  照片的序列化  ImageIO.read()  ImageIO.write()
  
  1 字符串的序列化 编码问题
    println()
    readLine()
  
  2 对象的序列化
    readObject()
    writeObject()


  常见文本文件读取方式
  对象的序列化
  流的总结
  

  广义上: 数据转换为byte 序列 都是序列化
   
  int long 可以序列化 -> 拆分
  String   可以序列化 --> 编码
  Image    可以序列化(.png) -> 图片的压缩格式
  对象(属性)可以序列化 对象编码为 byte 序列

  
7 什么是对象的序列化: 将Object转换为byte序列,就是序列化,反之叫反序列化
  为什么要序列化: 为了在byte流中存储对象
 如何序列化: 使用writeObject(Object)/readObject()
 1) 序列化流, 是过滤流
    ObjectOutputStream writeObject(Object) 序列化对象
    ObjectInputStream readObject() 对象的反序列化
 2) 序列化接口: 对象必须实现"序列化接口"才能进行 "序列化"
   否则出现不能序列化的异常!
 3) JavaBean 规范, 必须实现Serializable接口
   Java API中的类大多是Java Bean, 基本都实现了Serializable
 序列化的应用:
8 浅层复制与深层复制
 1) Java的默认复制规则是浅层复制, 性能好, 隔离性差
   浅层复制现象, 只复制第一层对象
 2) 利用序列化实现深层复制

.Java IO 总结
 1)是一种数据操作模型: 把任何数据都作为Byte的有序集合看待
  逐一处理的方式方式叫做流.
  Java 流模型, 是byte by byte 是数据集合
   data   :  41 42 00 00 ff ff d6 d0 
   index  :   0  1  2  3  4  5  6  7  8
   pointer:   ^ 
  
  RandomAccessFile 只能操作文件, 只能处理基本类型
  
  节点流: 流开始和结束的地方
  过滤器: 基本流的功能扩展
  
  字节流: 每次处理一个byte
  字符流: 每次出来一个char
  
  ObjectInputStream in = new ObjectInputStream(
  	 new CipherInputStream(
	  new FileInputStream(file)));
  Object obj = in.readObject();
  
  CipherInputStream in = new CipherInputStream(
	  new FileInputStream(file)); 
  img = ImageIO.read(in);
  
  装饰器模式: 流的API是按照装饰器模式设计的
 
 InputStream 最基本的输入流操作模型, 是抽象类(read()是没有实现的)
  |-- FileInputStream 实现了在文件上读取的方法 read(), 节点流
  |-- ByteArrayInputStream 实现了在数组里读取的方法 read()
  |-- FilterInputStream 过滤流,包装在一个基本流外部,提供功能扩展
  |    |-- DataInputStream 为基本流扩展了基本数据类型读取
  |    |    readInt() readDouble()...方法的底层是read()
  |    |-- BufferedInputStream 为基本流提供缓冲处理
  |    |-- CipherInputStream 解密输入流, 知道就行
  |    |-- ZipInputStream 解压输入流, 知道就行
  |-- ObjectInputStream 对象输入流, 也是过滤器
  
 OutputStream 最基本的输出流操作模型,是抽象类(write()是没有实现的)
  |-- FileOutputStream 实现了在文件上写出的方法 write(), 节点流
  |-- ByteArrayOutputStream 在变长数组上实现了write() 方法
  |-- FilterOutputStream 
  |    |-- DataOutputStream 基本类型输出
  |    |
  |    |-- BufferedOutputStream 缓冲输出
  |    |-- CipherOutputStream 加密输出
  |    |-- ZipOutputStream 压缩输出
  |-- ObjectOutputStream 对象输出流
 
 字符流, 每次处理一个字符

 Reader 抽象类, 定义了抽象方法read(), 每次读取一个字符
  |-- InputStreamReader 也是过滤器, 将byte序列解码为char序列
  |      底层也是依赖基本的byte输入流
  |-- BufferedReader (Scanner) 是字符流过滤器,
  |     有常用的文本读取方法readLine()
  |-- FileReader 底层是 FileInputSream + InputStreamReader
  |     不能指定读取文件的字符编码
  
 Writer 抽象类, 定义抽象方法write() 每次写出一个字符
  |-- OutputStreamWriter 也是过滤器, 将char序列编码为byte序列
  |      底层也是依赖基本的byte输出流
  |-- PrintWriter 是过滤器, 提供了常用方法println()
  |      非常常见的文本处理方法
  |-- FileWriter = OutputStreamWriter + FileOutputStream
  |      不能指定文本输出编码, 不好用!


