泛型：
所谓泛型就是指在对象建立时不指定类中属性的具体类型，而由外部在声明及实例化对象时指定类型。
泛型类定义：
［访问权限］ class 类名称<泛型标识1；泛型标识2；泛型标识3；泛型标识4>{
					［访问权限］ 泛型类型标识 变量名称
					［访问权限］  泛型类型标识 方法名称(){};
					［访问权限］ 返回值类型声明 方法名称{泛型类型标识 变量名称){}
		泛型对象定义：类名称<具体类> 对象名称 － new 类名称<具体类>();
	
构造器：[访问权限] 构造方法([<泛型类型> 参数名称]){}
JAVA中引入通配符“？”表示可以接收此类型的任意泛型对象
	注：如果使用？，则需要注意，如果使用“？”接收泛型对象时，则不能设置被泛型指定的内容。
	Info<?> i= new Info<String>();//使用"?"接收泛型对象
	不过可以设置为：null
		Info<?> i= new Info<String>();//使用"?"接收泛型对象
	i.setVar(null);//通过
	i.setVar("贾东坡);/错误，无法设置
	
受限泛型
	在引用传递中，在泛型操作中也可以设置一个泛型对象的范围上限和范围下限。
	范围上限使用extends关键字声明，表示参数化的类型可能是所指定的类型或者是此类型的子类，
	而范围下限使用super进行声明，表示参数化的类型可能是所指定的类型，或者是此类型的父类型，
	或是Object类，具体格式如下：
[格式10-4 设置上限]
	声明对象：类名称<? extends 类> 对象名称
	定义类：[访问权限] 类名称<泛型标识 extends 类>{}
[格式10-5 设置下限]
	声明对象：类名称<? super 类> 对象名称
	定义类：[访问权限] 类名称<泛型标识 extends 类>{}
泛型接口：[访问权限]interface 接口名称<泛型标识>{}
	定义泛型接口：interface Info<T>{//在接口上定义泛型 
				public T getVar();}
泛型接口的两种实现方式：
	泛型接口定义完成之后，就要定义此接口的子类，有两种方式，一种是直接在子类后声明泛型，
	另一种是直接在子类实现的接口中明确地给出泛型类型。	
泛型方法：泛型方法的定义与其所在的类是否是泛型类是没有任何关系的，所在的类可以是泛型类，也可以不是。
	在泛型方法中可以定义泛型参数，此时，参数的类型就是传入数据的类型格式如下：
	[访问权限] <泛型标识> 泛型标识 方法名称(泛型标识 参数名称)