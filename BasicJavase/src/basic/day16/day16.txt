RandomAccessFile  操作文件内容，访问文件任意位置
	8位bit	
	5M = 5X1024X1024 byte
	
	java文件模型，文件是byte by byte是数据有序集合
	data :	41	42	00	00	ff	d6	d0 ....
	index: 	0	1	2	3	4	5	6	7	8 ....
	pointer:^	
	
	
		java文件模型，文件是byte by byte是数据有序集合
	data :	41	42	42	ff	ff	ff	fe	d6	d0	??	??	08	00	ff ....
	index: 	0	1	2	3	4	5	6	7	8 	9	10	11	12	13	14....
	pointer:														^	

EOF = End of File = -1
输入流：从文件往程序里读文件，我们都是站在程序的角度看的。
输入流：从文件向程序，叫输入。另外叫输出。站文件角度叫输出，另外是输入。
字节流：按字节读，一个字节八位。inputStream/OutputStream
字符流：一个字符两个字节。Reader/Writer
字节流：从一个特定数据源（节点）读写数据（如：文件，内存）
处理流是‘连接’在已存在的流（节点流或处理流）之上，通过对数据的处理为程序提供更强大的读写功能。

继承自InputStream的流都是用于向程序输入数据，且数据单位为字节（8bit)。
继承自OutputSteam的流是用于程序中向外写数据，单位字节。
先写flush在写close


Reader：继承自Reader的流都是用于向程序中输入数据，且数据的单位为字符（16 bit);
		读取方式：两个字节两个字节向外读。InputStream是一个字节的读。
		读取一个字符并以整数的形式返回（0－255）
		如果返回－1已到输入流的末尾
		int read() throws IOException
		读取一系列字符并存储到一个数组buffer，返回实际读取的字符数，如果读取前已到输入流的末尾返回－1
		int read(char[] buffer) throws　ＩＯEｘｃｅｐｔｉｏｎ
		读取ｌｅｎｇｔｈ个字符，并存储到一个数组ｂｕｆｆｅｒ，从ｌｅｎｇｔｈ位置开始，返回实际读取的字符数
		ｉｎｔ　ｒｅａｄ(ｃｈａｒ[]　ｂｕｆｆｅｒ,ｉｎｔ　ｏｆｆｓｅｔ,ｉｎｔ　ｌｅｎｇｔｈ)ｔｈｒｏｗｓ　ＩＯＥｘｃｅｐｔｉｏｎ
		关闭流释放内存资源
		ｖｏｉｄ　ｃｌｏｓｅ()　ｔｈｒｏｗｓ　ＩＯＥｘｃｅｐｔｉｏｎ
		跳过ｎ个字符不读，返回实际跳过的字节数
		ｌｏｎｇ　ｓｋｉｐ(ｌｏｎｇ　ｎ)　ｔｈｒｏｗｓ　ＩＯＥｘｃｅｐｔｉｏｎ
Writer：
		向输出流中写入一个字符数据，该字节数据为参数ｂ的低16位
		ｖｏｉｄ　ｗｒｉｔｅ(ｉｎｔ　ｃ)ｔｈｒｏｗｓ　ＩＯＥｘｃｅｐｔｉｏｎ
		将一个字符类型的数组中的数据写入输出流
		ｖｏｉｄ　ｗｒｉｔｅ(ｃｈａｒ[]　ｃｂｕｆ)ｔｈｒｏｗｓ　ＩＯＥｘｃｅｐｔｉｏｎ
		将一个字符类型的数组中的从指定位置（ｏｆｆｓｅｔ)开始的ｌｅｎｇｔｈ个字符写入到输出流
		ｖｏｉｄ　ｗｒｉｔｅ(ｃｈａｒ[]　ｃｈｕｆ,ｉｎｔ　ｏｆｆｓｅｔ,ｉｎｔ　ｌｅｎｇｔｈ)ｔｈｒｏｗｓ　ＩＯＥｘｃｅｐｔｉｏｎ
		将一个字符串中的字符写入到输出流
		ｖｏｉｄ　ｗｒｉｔｅ(Ｓｔｒｉｎｇ　ｓｔｒｉｎｇ)ｔｈｒｏｗｓ　ＩＯＥｘｃｅｐｔｉｏｎ
		将一个字符串从ｏｆｆｓｅｔ开始的ｌｅｎｇｔｈ个字符写入到输出流
		ｖｏｉｄ　ｗｒｉｔｅ(Ｓｔｒｉｎｇ　ｓｔｒｉｎｇ,ｉｎｔ　ｏｆｆｓｅｔ,ｉｎｔ　ｌｅｎｇｔｈ)ｔｈｒｏｗｓ　ＩＯＥｘｃｅｐｔｉｏｎ
		将输出流中缓冲的数据全部写出到目的地
		ｖｏｉｄ　ｆｌｕｓｈ()　ｔｈｒｏｗｓ　ＩＯＥｘｃｅｐｔｉｏｎ	
		关闭流释放内存资源
		ｖｏｉｄ　ｃｌｏｓｅ()　ｔｈｒｏｗｓ　ＩＯＥｘｃｅｐｔｉｏｎ
	
		继承自Writer的流都是用于程序中输出数据，单位两个字节，16bit
OｕｔｐｕｔＳｔｒｅａｍ基本方法：
	向输出流中写入一个字节数据，该字节数据为参数ｂ的低8位。
	ｖｏｉｄ　ｗｒｉｔｅ(ｉｎｔ　ｂ)　ｔｈｒｏｗｓ　ＩＯＥｘｃｅｐｔｉｏｎ
	将一个字节类型的数组中的数据写入输出流
	ｖｏｉｄ　ｗｒｉｔｅ(ｂｙｔｅ[]　ｂ)ｔｈｒｏｗｓ　ＩＯＥｘｃｅｐｔｉｏｎ
	