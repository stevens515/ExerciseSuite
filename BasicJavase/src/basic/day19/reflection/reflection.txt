反射：一切的操作都将使用Object完成
	如果已经有一个类，则肯定可以通过类创建对象；那么如果现在要求通过一个对象
	找一个类的名称，此时就需要用到反射机制了。
	public final Class getClass()返回类型是一个Class类，实际上此类是Java反射的源头。
	所谓反射从程序的运行结果来看也很好理解，即可以通过对象反射求出类的名称：如下：
	正常方式：引入需要的"包.类"名称->通过new实例化->取得实例化对象
	反射方式：实例化对象->getClass()方法->得到完整的”包.类“名称
	
	提示：所有类的对象实际上都是Class类的实例。
		在java中Object类是一切类的父类，那么所有类的对象实际上也就都是java.lang.Class类的实例
		所以所有的对象都可以转变为java.lang.Class类型表示
		
Class本身表示一个类的本身，通过Class可以完整地得到一个类中的完整结构，包括此类中的方法定义和属性定义等。
	常用方法：
		1) public static Class<?> forName(String className) throws ClassNotFoundException
		传入完整的“包.类”名称实例化Class对象
		2) public Constructor[] getConstructors()throws SecurityException
		得到一个类中的全部构造方法
		3)public Field[] getDeclaredFields()throws SecurityException
		得到本类中单独定义的全部属性
		4)public Field[] getFields()throws SecurityException
		得到本类继承而来的全部属性
		5) public Method[]	getMethods()throws SecurityException
		得到一个类中 的全部方法
		6) public Method getMethod(String name,Class...parameter Types)
			throws NoSuchMethodException,SecurityException
			返回一个Method对象，并设置一个方法中的所有参数类型
		7) public Class[] getInterfaces()  得到一个类中所有实现的全部接口
		8) public String getName()  得到一个类完整的"包.类"名称
		9) public Package getPackage()	得到一个类的包
		10) public Class getSuperclass()	得到一个类的父类
		11) public Object newInstance()throws InstantiantionException,IllegalAccessException
			根据Class 定义的类实例化对象
		12) public Class<?>getComponentType() 返回表示数组类型的Class
		13） public boolean isArray() 判断此Class是否是一个数组
Class类本身没有定义构造方法，所以如果要使用则首先必须通过forName()方法实例化对象，也可以
使用“类.class”或“对象.getClass()”方法实例化
调用有参数构造实例化对象：
	只有在操作时需要明确地调用类中的构造方法，并将参数传递进去之后才可以进行实例化操作：
	步骤：(1)通过Class类中的getConstructors()取得本类中的全部构造方法
		(2)向构造方法中传递一个对象数组进去，里面包含了构造方法中所需的各个参数
		(3)之后通过Constructor实例化对象
	此处使用了Construtor类，表示构造方法。常用方法如下：
	public int getMedifiers()	得到构造方法的修饰符
	public String getName()	得到构造方法的名称
	public Class<?>[]getParameterType()得到构造方法中参数的类型
	pubic String toString()  返回此构造方法的信息
	public T newInstance(Object...initrgs)throws InstantiationException,
		IllegalAccessException,IllegalArgumentException,InvocationTargetException
		向构造方法中传递参数，实例化对象
反射的应用--取得类的结构：在java.lang.reflect包中有以下几个类：
	Constructor:表示类中的构造方法
	Field:表示类中的属性
	Method:表示类中的方法
	这三个类都是AccessibleObject类的子类。
取得所实现的全部接口
	要取得一个类所实现的全部接口，则必须使用Class类中的getInterfaces()方法.定义如下：
		public Class[] getInterface()
	getInterface()返回一个Class类的对象数组，之后直接利用Class类中的getName()方法输出即可
取得父类：
	一具类可以实现多个接口，但是只能继承一个父类，所以如果要取得一个类的父类，可以直接使用Class类中的getSuperclass()方法。此方法定义如下：
	public Class<? super T>getSuperclass()
	getSuperclass()返回的是Class实例，和之前得到一个接口一样，可以通过getName()方法取得名称 
取得全部方法
	使用Class类中的getMethods()方法，此方法返回一个Method类的对象数组。而如果要进一步取得方法
	的具体信息，则就必须依靠Method类，此类常用方法如下：
	A) public int getModifiers()  取得本方法的访问修饰符
	B) public String getName() 取得方法的名称
	C) public Class<?>[] getParameterTypes() 得到方法的全部参数类型
	D) public Class<?> getReturnType()  得到方法的返回值类型
	E) public Class<?>[] getExceptionTypes()  得到一个方法的全部抛出异常
	F) public Object invoke(Object obj,Object...args) throws 
		IllegalAccessException,IllegalArgumentException,InvocationTargetExceiption
		通过反射调用类中的方法，此方法在后面将为读者介绍
取得全部属性：两种不同的操作
	A).得到实现的接口或父类中的公共属性：public Field[] getFields()throws SecurityException
	B). 得到本类中的全部属性：public Field[] getDeclaredFields()throws SecurityException
		每个Field对象表示类中的一个属性，要取得属性的进一步信息，还需要Field类的常用方法如下：
		1）public Object get(Object obj)throws IllegalArgumentException,IllegalAccessException
		得到一个对象中属性的具体内容
		2）public void set(Object obj,Object value)throws IllegalArgumentException,IllegalAccessException
		设置指定对象中属性的具体内容
		3）public int getModifiers()得到属性的修饰符
		4）public String getName()返回属性的名称
		5）public boolean isAccessible()判断此属性是否可被外部访问
		6）public void setAccessible(boolean flag)throws SecurityException设置一个属性是否可以被 外部访问
		7）public statci void setAccessible(AccessibleObject[] array,boolean flag)throws SecurityExceiption
			设置一组属性是否可被 外部访问
		8) public String toString() 返回此Field类的信息
通过反射调用类中的方法
	操作步骤如下：
		1） 通过Class类的getMethod(String name,Class...parameterTypes)方法取得一个Method的对象，
			并设置此方法操作时所需要的参数类型
		2） 之后才可以使用invoke进行调用，并方法中传递要设置的参数
通过反射操作属性：
	在反射操作中虽然可以用Method调用类中的setter及getter方法设置和取得属性，但是这样操作毕竟很麻烦，所以在
	反射机制中也可以直接通过Field类操作类中的属性，通过Field类提供的set()和get()就可以完成 设置和取得属性内容的
	操作。但是在操作前需要注意的是，在类中的所有属性已经都设置成私有的访问权限，所以在使用set()或get()方法时首先要
	使用Field类中的setAccessible(true)方法将需要操作的属性设置成可以被外部访问。
通过反射操作数组：
	反射机制不仅只能用在类上，还可以应用在任意的引用数据类型的数据上，当然，这本身就包含了数组，即可以使用反射操作数组。
	可以通过Class类的以下方法取得一个数组的Class对象
		public Class<?> getComponentType()
	在反射操作包java.lang.reflect中使用Array类表示一个数组，可以通过此类取得数组长度，取得数组内容的操作。
	Array类常用方法如下：
		public static Object get(Object array,int index)
			throws IllegalArgumetnException,ArrayIndexOutOfBoundsException
		根据下标取得数组内容
		public static Object newInstance(Class<?> componentType,int length)throws NegativeArraySizeException
		根据已有的数组类型开辟新的数组对象
		public static void set(Object array,int index,Object value)throws IllegalArgumentException,ArrayIndexOutOfBoundsException
		修改指定位置的内容
		
		
		
7. Java 反射 java.lang.reflect
 1) 反射是Java自我管理(类, 对象)的机制
 2) * 可以通过反射机制发现对象的类型 发现类型的方法/属性/构造器
 3) * Java 反射 可以创建对象 并 访问任意对象方法和属性等
 4) Class 加载
	 类加载到内存: java 将磁盘类文件加载到内存中,为一个对象(实例)
	这个对象是Class的实例, 也就是 这些对象都是Class实例
 5)Class 实例代表Java中类型, 基本类型的类型: int.class, long.class
  类类型 Class 实例获得如下:
	Class cls = String.class;
	Class cls = Class.forName("java.lang.String");
	Class cls = "abc".getClass();
  以上方法获得cls 是同一个对象, 就是String 类内存加载的结果