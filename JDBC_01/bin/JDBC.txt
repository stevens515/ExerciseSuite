dao:
	1)什么是DAO？
			data access object(数据访问对象)
			封装了数据访问逻辑的一个模块。这样做的好处是：当数据访问逻辑发生了改变，不会影响到调用模块。
	2）如何写一个DAO？
			a.写一个实体类：
					所谓实体类，其实是一个java类，与要访问表对应。比如：Employee类（id,name,salary,age）
			b.写一个接口，在接口当中，声明相应数据访问方法。
					需要注意的是：声明的方法不应该与具体的技术相关。比如：EmployeeDAO接口
																												public void save(Employee e)throws Exception;
			c.使用某种技术实现接口。比如：EmployeeDAOImpl类，采用jdbc技术实现save操作。
			d.写一个工厂类，方便调用者调用该DAO.
					工厂类：封装了对象的创建过程，调用才不需要了解对象的具体创建过程，就可以通过工厂类来获得相应的实例。
		练习：写一个“学员信息管理系统”。
				功能：
						1）列出所有学员的基本信息（包括id,姓名，性别，年龄），当点击“查看”，则还要显示电话。
						2）添加新学员
						3）删除学员
						4）查看学员信息
						5）修改某个学员的信息
				实现：step1建一个t_student表
							create talbe t_student(
								id bigint primary key auto_increment,
								name varchar(20),
								gender char(1),
								age int,
								phone varchar(20)
							);

重定向：
			1）什么 是重定向？
					服务器向浏览器发送一个302状态码及一个Location消息头（该消息头的值是一个地址）。
					浏览器在收到之后，会立即向这个地址发送请求
			2）编程
						response.sendRedirect(String url);
						注意：重定向之前，不能够有任何的输出，否则会发生错误。
									重定向之前，会先清空response中缓存的数据。
			3)特点：	
						重定向的地址是任意的
						重定向之后，浏览器地址栏的地址会变成Location所指定的地址 。                                            


JDBC day01:136 8339 5890
1。
如何用java语言访问数据库！
Java期望用相同的方式连接不同的数据库。

Java提供标准(Interface),各个数据库厂商提供实现(Interface)

JDBC:java定义的用于访问数据库的标准！(一堆接口)

各个数据库过份实现了Java提供的JDBC标准。Java以增加JDBC的标准项来应对。

2。用JDBC连Oracle
需要有哪些资源？
	JDBC API(包含在JDK中，java.sql.*)：就是java提供的接口
	接口的实现类：Oracle对JDBC的实现包

不重要：不要用这种方式连
曾经有一种方式JDBC：ODBC桥
	ODBC比JDBC早，是微软发现的，通用方式。在java出现前比较火
	一堆类，是把JDBC转换成ODBC的一种转换器。只能在微软的平台上跑。
	
	黑客：SQL  injection 就是SQL注入
b' or 'c' = 'c
select count(*) from tts_user
	where username = 'a' and password ='';
	
select count(*) from tts_user
	where username = 'a' and password ='    b' or 'c' = 'c    ';
	
	//如果没参数可以直接executeQuery()，如果有参数就必须set()
PreparedStatement stmt =
	con.preparedStatement("select * from emp..");
	
	
只和输入有关的方法应该写成静态方法，和类无关，和对象无关的，只和输入的参数有关时定义成静态方法
如果一个方法，它的运行和类无关时，放哪个类里都行，应该定义为静态方法
如果一个方法对对象没有关系，我们可以把它定义成静态方法
如果一个方法类的属性没有关系，我们可以把它定义成静态方法	
	好的：
	int temp=a;
	a=b;
	b=temp;
	不好的：
	a=a+b;
	b=a-b;
	a=a-b
这两个是完全一样的：
	oracle.jdbc.OracleDriver
	oracle.jdbc.driver.OracleDriver
java.sql.Statement:用于执行静态SQL语句，并返回其生成结果的对象
java.sql.PrepareStatement:继承自statement，表示预编译的SQL语句的对象，SQL语句被
				编译并且存储在PreparedStatement对象中。然后可以使用此对象高效也多次执行该语句 。
	总结：
			Select与DML(insert/update/delete)的区别：
				1）sql语句不一样
				2）Select通过Statement对象的executeQuery()方法获得结果集：
						ResultSet rs = stmt.executeQuery()
				3) DML语句通过Statement对象的executeUpdate()方法获得操作数：
						int n = stmt.executeUpdate();
			Select与DML(insert/update/delete)的相同点：
				1)   获得连接(Connection)方式相同。
				2）数据库连接对象(Statemetn/PreparedStatement)
						两种都可以需要多次执行的sql语句，使用PreparedStatement性能更好。
				3）如果使用PreparedStatement,sql语句在生成语句对象的时候传递，并绑定占位符(问号)和数据的关系
						stmt = conn.prepareStatement(sql);
						stmt.setString(1,password);
						stmt.setString(1,id);
						stmt.setInt(2,id);
						stmt.executeQuery()或executeUpdate();//参数不写sql
				4) 	如果使用Statement,sql语句在执行时传递
						stmt = conn.createStatement();
						stmt.executeQuery(sql)或executeUpdate(sql)
				5)	PreparedStatement和Statement对象，sql语句的传递时机不同。
	
	
JDBC中的事务：
	1）JDBC默认事务是自动提交的，也就是每个DML操作完成后都自动提交。
			可以改为手动提交，如下：
			conn.setAutoCommit(false);//ture自动提交
	2） Sqlplus中默认事务是非自动提交，默认必须显式或隐式提交。
			可以使用如下语句设置：
			SQL>set autocommit on  ---->打开自动提交
			SQL>set autocommit off ---->关闭自动提交，默认	
	
	Mysql数据库中的分页：
			1）rownum是Oracle独有的，其它数据库不能用
			2）不同的数据库x-y条数据的方式不同
			3）mysql中的分页较简单，方法如下：
					－－从第21条开始，到10条
					SQL>select * from mytemp_xxx limit 21,10;
	两种分页策略总结：
			1）基于缓存的分页策略：
					技术核心：获得数据库全部数据，得到可滚动结果集，通过移动指针从结果集中取部分数据
					适用于数据量小的表
			2）基于查询分页策略：
					技术核心：直接从数据表中取部分数据
					适用于任何数据量的表
	
	