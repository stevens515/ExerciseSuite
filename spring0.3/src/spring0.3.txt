1.AOP的概念及优点：
	Aspect Oriented Programming  面向方面编程
	面对对象编程关注点是对象，面向方面编程以面向对象编程为基础，关注点是切面。
切面组件可以作用在若干目标对象的方法上，封装了具有通用性的一些处理。例如日志记录，事务处理，异常处理等
	面对方面编程优点：将共能处理封装成了一个独立组件，利用配置形式作用在了某一批目标对象上，
实现组件的重复利用，将切面和目标对象解耦，实现了低耦合应用。
	*a.切面(Aspect)
		封装了共能处理的组件，用于切入到目标对象的处理方法中。
	*b.切入点(Pointcut)
		用于指定目标对象和方法的一个表达式
		连接点是切面组件与某一个目标对象方法的作用点，例如方法调用 和异常发生。 
	*c.通知(Advice)
		用于指定切面功能切入目标对象方法的位置。例如切入到目标方法调用之前，目标方法调用之后等。
		通知类型：前置通知，后置通知，环绕通知，最终通知，异常通知。
			try{
				//执行前置通知<aop:before>
				//执行环绕通知--前置<aop:around>
				执行目标对象方法
				//执行--环绕通知--后置
				//执行后置通知<aop:after>
			}catch(Exception ex){
				//执行异常通知<aop:after-throwing>
			}finally{
				//执行最终通知<aop:after>
			}
	d.目标对象(Target)
		需要使用切面功能的，被切入的Bean对象使用切入点表达式指定。
	e.动态代理(AutoProxy)
		在Spring采用了AOP之后，从容器取出的目标对象是一个动态代理类型，调用代理对象方法时，
代理对象会调用切面功能和目标对象功能。
		动态代理类生成技术：
				有接口的目标对象采用JDK Proxy技术
				没有接口的目标对象采用CGLIB技术
2.切入点表达式的定义
	1）方法限定execution
		execution(修饰符? 返回类型 方法名(参数) throws 异常?)
		a.匹配com.tarena.UserDAO的save()方法
			execution(* com.tarena.UserDAO.save(..))
		b.匹配com.tarena.UserDAO的所有方法
			execution(* com.tarena.UserDAO.*(..))
		c.匹配com.tarena.UserDAO的public void 方法
			execution(public void com.tarena.UserDAO.*(..))
		d.匹配com.tarena包所有类型的所有方法
			execution(* com.tarena.*.*(..))
		e.匹配com.tarena包下及其子包所有类型的所有方法
			execution(* com.tarena..*.*(..))
		f.匹配UserDAO中有一个参数并且是String类型的方法
			execution(* com.tarena..*.*(java.lang.String))
			
	2）类型限定within
		within(类型)
		a.匹配com.tarena.UserDAO的所有方法
			within(com.tarena.UserDAO)		
			
			
		b.匹配com.tarena包下的所有类的所有方法
			within(com.tarena.*)
		b.匹配com.tarena包下及其子包的所有类的所有方法
			within(com.tarena..*)
	3)id名限定bean
		bean(idOrName属性值)
		a.匹配容器中所有id或name属性值以dao结尾的bean对象
			bean(*dao)
			
3利用注解方式 实现AOP
	1）首先需要在xml配置中，启用aop注解配置
		<aop:aspectj-autoproxy/>
	2）在Java类中使用以下注解
		a.＠Aspect:用在类定义前，指定当前组件是切面 
		b.@Pointcut:用在方法定义前，指定切入点表达式
		c.@Around:用在方法定义前，指定当前方法采用环绕通知切入 
		d.@AfterThrowing:用在方法定义前，指定当前方法采用异常通知切入
		e.@AfterReturnning:用在方法定义前，指定当前方法采用后置通知切入
		f.@After:用在方法定义前，指定当前方法采用最终通知切入
		g.@Before:用在方法定义前，指定当前方法采用前置通知切入
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			