1/什么是javascript:嵌入html页面中的脚本代码,页面的动态效果
2/常用于:动态效果/页面验证

3/特点:基于对象和事件驱动的解释性语言

4/组成:基本语法/D(document)OM/B(Browser)OM

5/脚本代码的书写:
	内联:onclick="alert('dd');"
	<script>块:页面的<head>区域中的<script>
	js文件:

6/基本语法
	变量名/方法名:字母/数字_$组成,不能以数字开头
	注释://   /**/
	声明变量:var name = value;类型由值决定
	js是一种类型松散的语言
	隐式转换
		string+number--string
		string+bool--string(true/false)
		number+bool(1/0)--number
	显式转换
		toString()
		parseInt()
		parseFloat()
	测试类型
		typeof(s)--number/string/boolean/object
	相等或者严格相等
		== 只是比较值
		===  比较值和类型
	isNaN

变量类型:
	string
	number
	boolean
	null
	undefined
	object

常用操作:
	字符串操作:string对象方法
		.length
		substring(start,end)--不包含end,end是真实结束位置加1
		substr(start,length)--从strart开始,取length个数
		split
		charAt
		indexOf
		toLowerCase/toUpperCase

		search(返回匹配索引)/replace/match(匹配的结果)

	数组操作:
		声明定义
		为数组赋值
		toString()/join()--输出数组内容
		concat()---数组的相加
		slice(start,end)
		reverse/sort
	数学操作:Math.round/random(0=< <1)/floor/ceil
	函数:function name(n1,n2){}
		返回值:return 
		不可以重载:方法同名,覆盖
		arguments:记载当前方法的所有参数,常用于实现类似于方法的重载

DOM(document object modal)操作:
	什么是DOM:标记作为节点树上的节点
	将HTML标记对象化
		元素标记作为一个节点对象
		属性标记作为对象的属性存在
			style属性:每个样式属性作为style.属性存在:font-size-----fontSize
			className
		元素标记中间的内容作为
search/find--找到元素
	方法一:document.getElementById--通过id精确查询
	方法二:document.getElementsByTagName--通过标记(元素名称)查询,可以被其他可以包含子元素的元素调用
		$("img1").src = "b.jpg";
<img src="a.jpg">
		onmouseover/onmouseout	
		this关键字---引发事件的当前元素对象
	方法三:parentNode/nextSilbing

读取元素的信息:
	.value----<input
	.innerHTML(设置标记中间的文本)----span/div/p/h1
	.style/className

修改元素的信息:var a = op.value;
		op.value = "";	

string.search/match/replace---字符串的匹配操作

正则表达式---验证
	var reg = /\d{3}/;--reg变量代表一个正则表达式对象
	reg.test(string);---bool
取消事件
	onclick="return false;"

添加新元素
	document.createElement("h4")
	appendChild--追加子元素(作为最后一个子元素)--父元素的位置
	insertBefore/insertAfter---找到参照物的父元素,调用父元素.insrtXX方法(new,参照物)

删除
	removeChild

	dom中的专用于表格的操作(小/大量)
		table.rows
		table.insertRow(index);deleteRow(index)
		tr.insertCell(index)/deleteCell(index)

BOM---browser object modal
	window对象自己的属性和方法
		window.open:编程实现打开新页面(新窗口打开)
参数1:url
参数2:name
参数3:窗口的配置--width/height/status/toolbar
		窗口间数据的传递:被打开的窗口中,使用:opener.document.getElementById

		window.close
		window.focus/blur
		window.alert/confirm/prompt()--判断其返回值,与null做比较
		window.setInterval(事情,间隔)---周期性时钟
		window.setTimeout----一次性时钟,常用于倒计时的效果
		window.clearTimeout


常用子对象:
	location.href = url;---history.back
	location.replace(url);----no history

	navigator对象----浏览器软件的信息--只有只读属性,没有方法

event事件
	状态事件:onload/onchange/onblur
	鼠标事件:onclick/ondblclick
	键盘事件:onkeydown/onkeyup
	
	event对象:记载事件的所有信息
		IE/chrome/opera里:event
		Firefox里:
	事件冒泡机制:父子元素定义了相同的事件,层层向上触发
		form/body--不建议onclick
		event.cancelBubble = true;
		适用于:界面上有大量元素需要使用相同事件的时候,为大量元素的父元素定义事件,使用event.target/srcElement获得引发事件的元素本身,使用nodeName获得元素的名称

	为元素注册事件:onclick="aaa();"---静态定义事件处理方法
		动态的为元素注册事件(事件属性):button.onclick = function对象;
	input.onblur = func1;
	div.onmouseover =func2;

OO编程:类/对象的声明,实现数据和行为的封装
	方式一:Object
		var p = new Object();
		p.属性名称 = 值;
		p.方法名称 = func对象/new function(){};

	方式二:自定义一个对象
function className(p1,p2,p3,...)
{
	this.属性名称 = 值;
	this.方法名称 = func对象/new function(){};}
var o = new className(,,,,);

	方式三:json的方式
var p = {"name":"mary","age":18,"isPretty":false};


课后练习:走马灯的效果
	页面加载后,图形,每3s换个图像(1,2,3,4,1),鼠标移入图形上,变换停止;鼠标移走,继续












