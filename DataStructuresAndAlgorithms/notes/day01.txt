 链表
 链表是一种用于存储数据集合的数据结构。链表有以下属性：
 1.相邻元素之间通过指针连接
 2.最后一个元素的后继指针值为NULL
 3.在程序执行过程中，链表的长度可以增加或缩小
 4.链表的空间能够按需分配（直到系统内存耗尽）
 5.没有内存空间的浪费（便是链表中的指针需要一些额外的内存开销）
 
 常用操作：插入、删除、删除链表、计数、查找。
 链表的优点：
 链表的优点是，它们可以在常数时间内扩展。当创建数组时，必须分配能存储一定数量元素的内存。如果向数组中添加更多的元素，那么必须创建一个新的数组，然后把原数组中的元素复制到新数组中，这将花费大量的时间。
 当然，可以通过为数组预先分配一个很大的空间来预防上述情况的发生，但是这个方法可能会因为分配超过用户需要的空间而造成内存浪费。而对于链表，初始时仅需要分配一个元素的存储空间，并且添加新的元素也很容易，不需要做任何内存复制和重新分配操作。
 链表的缺点：
 链接有很多不足，其主要缺点在于访问单个元素的时间开销总是。数组是随机存取的，即存取数组中任何一元素的时间开销为O(1)。而链表在最差情况下访问一个元素的开销为O(n)。数组在存取时间方面的另外一个优点是内存的空间局部性。由于数组被定义为连续的内存块，所以任何数组元素与其邻居是物理相邻的。这极大得益于现代CPU的缓存模式。
 
 
 数组
 整个数据所有的元素都存储在操作系统分配的一个内存块中。通过使用特定元素的索引作为数组下标，可以在常数时间内访问数组元素。
 数组的优点：
 1.简单且易用
 2.访问元素快（常数时间）
 
 数组缺点：
 1.大小固定：数组的大小是静态的（在使用前指定数组的大小）
 2.分配一个连续空间块：数组初始分配空间时，有时无法分配能存储整个数组的内存空间（当数组规模太大时）。
 3.基于位置的插入操作实现复杂：如果要在数组中的给定位置插入元素，可能需要移动存储在数组中的其他元素，这样才能腾出指定的位置来放插入的新元素。如果在数组的开始位置插入元素，那么移动操作的开销将更大。
 
 
 什么是栈？
 栈是一种用于存储数据的简单数据结构（与链表类似）。数据入栈的次序是栈的关键。可以把自助餐厅中的一堆盘子看作一个栈的例子。当盘子洗干净后，它们会添加到栈的顶端，当需要盘子时，也是从栈的顶端拿取。所以第一个放入栈中的盘子最后才能被拿取。
 定义：栈（stack）是一个有序线性表，只能在表的一端（称为栈顶，top）执行插入和删除操作。最后插入的元素将第一个被删除。所以，栈也称为后进后出(Last In first Out,LIFO)或先进后出（First In Last Out,FILO）线性表。
 
 
 什么是队列？
 队列是一种只能在一端插入（队尾），在另一端删除（队首）的有序线性表。队列中第一个插入的元素也是第一个被删除的元素。所以，队列是一种先进先出(FIFO,First In First Out)或后进后出(LILI,Last In Last Out)线性表。
 与栈类似，两个改变队列的操作各有专用名称。在队列中插入一个元素，称为入队(EnQueue),从队列中删除一个元素，称为出队(DeQueue)。试图对一个空队列执行出队操作称为下溢(underflow)，试图对一个满队列执行入队操作称为溢出(overflow).
 
 如何使用队列？
  可以通过售票柜台前排队购票的例子来理解队列的概念。新来购票的人只从队尾开始排队等待，而队列最前面的人将是下一个被服务的对象，他将离开队列去柜台前买票。然后，他的下 位排队者将成为队列中的第一个人，并且将成为下一个离开队列买票的人。随着队列中最前面的人不断离开队列，其他人都随之向队列前面移动。最后，队列中的每个人都会依次到达队首，然后离开队列去接受服务。当需要维持一个先后次序（或到达次序）时，采用队列是非常有用的。
  
  队队列抽象数据类型
  enQueue(int data):在队列的队尾插入一个元素。
  int deQueue()：删除并返回队首的元素。
  int Front():返回队首的元素，但不删除。
  int QueueSize():返回队列中存储的元素个数。
  int isEmpty():指明队列是否存储了元素。
  
  什么是树
  树是一种类似于链表的数据结构，不过链表的结点是以线性方式简单指向其后继结点，而树的一个结点可以指向许多个结点。树是一种典型的非线性结构。树结构是表达具有层次特性的图结构的一种方式。
  对于树ADT(抽象数据类型)，元素的顺序不是考虑的重点。如果需要用到元素的顺序信息，那么可以使用链表、栈、队列等线性数据结构。
  
  术语
  根结点
 边
叶子结点：
兄弟结点：
祖先结点：
结点的大小：
树的层：
结点的深度：
结点的高度：
树的高度：
斜树：



 
  
 
 
 
 